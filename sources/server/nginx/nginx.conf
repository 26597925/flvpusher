user  root;
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

worker_rlimit_nofile 8192;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    tcp_nopush      on;
    server_names_hash_bucket_size 128;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # note:
        # 1.dynamic vod support under html/hls-dynamic-vod/
        # 2.put flvpusher in sbin/hls-dynamic-vod-tool/
        location ~ ^/hls-dynamic-vod/.*\.(m3u8|ts)$ {
            root html;
            access_by_lua '
                local req_file = ngx.var.document_root .. ngx.var.uri
                local flvpusher = ngx.var.document_root .. "/../sbin/hls-dynamic-vod-tool/flvpusher"
                local res = 0

                local uri_suffix = string.match(ngx.var.uri, ".+%.(%w+)$")
                if uri_suffix == "ts" then
                    local file, err = io.open(req_file)
                    if file then -- if segment already exists, quick through
                        file:close()
                        return
                    end

                    -- generate the requested segment
                    res = os.execute(string.format("%s -S %s --no_logfile", flvpusher, req_file))
                else
                    -- update m3u8 last access-time
                    res = os.execute(string.format("%s -m %s --no_logfile", flvpusher, req_file))
                end
                if res ~= 0 then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
            ';
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

# rtmp support
rtmp {
    server {
        listen 1935;

        timeout 30s;

        ping 3m;
        ping_timeout 30s;

        max_streams 32;

        ack_window 5000000;

        chunk_size 1024;

        max_message 1M;

        application live {
            live on;

            meta on;

            interleave off;

            wait_key on;

            sync 300ms;
        }
    }
}
